###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> DeepSeekR1 {\n  provider ollama\n  options {\n    model \"deepseek-r1:1.5b\"\n    base_url \"http://localhost:11434/v1\"\n  }\n}\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.73.5\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "objective.baml": "enum Node {\n  OBJECTIVE_ANALYSIS\n  BASE\n}\n\n\nclass ObjectiveAnalysis {\n  objective string @description(#\"\n    an objective such as \"the student shall jump.\"\n  \"#)\n}\n\nclass QuestionAnswering {\n  querry string @description(#\"\n    a question such as \"why is the sky blue?\"\n  \"#)\n}\n\n\nclass Route {\n  node Node\n}\n\n\nclass Objective {\n  objective string\n}\n\n\nfunction ChooseNextNode(user_message: string) -> Route {\n  client DeepSeekR1\n  prompt #\"\n    You are a router. Your task is to route the conversation to the next node of action based on the input provided by the user.\nYou must choose one of the following nodes: OBJECTIVE_ANALYSIS, BASE.\n\n### Criteria for Choosing the Next Node:\n- **OBJECTIVE_ANALYSIS**: If objective analysis is requested by the user.\n- **BASE**: Any other use case than the one's listed previously.\n\nuser input:\n    ---\n    {{user_message}}\n    ---\n\n    {{ctx.output_format(prefix=\"you must provide your response in the following json format:\")}}\n  \"#\n}\n\n\nfunction DetectObjective(user_message: string) -> Objective {\n  client DeepSeekR1\n  prompt #\"\n    Your task is to detect the objective in the provided input text.\n\ninput text:\n    ---\n    {{user_message}}\n    ---\n\n    {{ctx.output_format(prefix=\"you must provide your response in the following json format:\")}}\n  \"#\n}\n\n\nfunction ChooseTool(user_message: string) -> ObjectiveAnalysis | QuestionAnswering {\n  client DeepSeekR1\n  prompt #\"\n    Choose the right schema that contains all the information in this message:\n    ---\n    {{user_message}}\n    ---\n\n    {{ctx.output_format}}\n\n    JSON:\n  \"#\n}",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map